#+title: My emacs init file
#+author: Nicky van Foreest
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes


* Installing Emacs

1. Close Emacs.
2. =cd ~/.emacs.d=
2. =rm -rf elpa elpy=
3. =git clone  https://github.com/ndvanforeest/emacs.git=
4. Open Emacs, it will download all the packages. (Ignore the warnings on the first launch.)
5. And now you can use it.

I only use org-mode, latex, python, and git (and sometimes plain txt). I
think I optimized my init.el for this, and I stripped all the rest.

I decided to not tinker with the standard emacs key bindings; over the
years I have noticed that they are mostly very well thought-out, and,
perhaps more importantly, they don't change.

* Emacs documentation


** General things

I learned a lot about emacs from the following sites

- [[https://sachachua.com/blog/emacs/][Sacha Chua]] Here you can find
  many useful posts and subscribe to the extremely useful emacs weekly
  newsletter.
- [[https://cestlaz.github.io/stories/emacs/][CestlaZ]] A series of   youtube movies by Mike Zamansky on how to work with and configure  emacs. He provides many useful suggestions.
- [[https://www.masteringemacs.org/][Mastering Emacs]]. A  nice  book about emacs.
- [[https://www.emacswiki.org/emacs/EmacsNewbieHelpReference][Emacs  wiki]]
- [[http://pragmaticemacs.com/]]
- [[https://github.com/emacs-tw/awesome-emacs]]
- [[https://www.gnu.org/software/emacs/manual/pdf/eintr.pdf][Chassel  R.]] An introduction to programming in elisp


** Some useful posts

- [[https://menno.io/posts/use-package/]]
- [[https://medium.com/@suvratapte/configuring-emacs-from-scratch-use-package-c30382297877]]
- [[https://www.masteringemacs.org/article/introduction-to-ido-mode][Ido]]

** Useful =init.el= files

- https://github.com/snackon/Witchmacs
- [[https://github.com/suvratapte/dot-emacs-dot-d]]
- [[https://github.com/gjstein/emacs.d]]
- [[https://github.com/ianpan870102/yay-evil-emacs/blob/master/config.org]]
- [[https://github.com/technomancy/better-defaults]]
- [[https://nasseralkmim.github.io/notes/2016/08/21/my-latex-environment/]]


* General help on emacs
- =C-h f= to get function documentation
- =C-h v= variable
- =emacs-init-time= time it takes to start up emacs
- "M-q" format elisp code
- "emacs-init-time": gives time to load emacs

* Load straight

This is performance trick  reduces the number of times the garbage collector will run during the startup process. At the end of =init.el= I set it to some decent value again.
#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))
#+end_src


#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(setq package-enable-at-startup nil)
#+end_src

* Use-package

#+begin_src emacs-lisp
(straight-use-package 'use-package)
(setq straight-use-package-by-default t)
#+end_src

Assemble statistics
# +begin_src emacs-lisp
(setq use-package-compute-statistics t)
(setq use-package-verbose t)
#+end_src

- =use-package-verbose t= to  see which packages get loaded during init and how long it takes to load them.
- =(use-package-compute-statistics t)= to assemble some statistics. With M-x use-package-report you can see the status of all loaded packages.

* No littering

#+begin_src emacs-lisp
(use-package no-littering)
#+end_src

* Auto-tangle to init.el

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
;; Automatically tangle our Emacs.org config file when we save it
(defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/README.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src
* General emacs config

In an earlier version I put all the above in ~(use-package emacs)~, but I found that not as useful. In org mode I can comment each and every line.

** Maximize useful space, Disable most gui elements

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
(horizontal-scroll-bar-mode -1)
(set-fringe-mode 30)        ; Give some breathing room

#+end_src



** TODO Number the lines and columns

#+begin_src emacs-lisp
(column-number-mode t)
#+end_src

The newer way is to use =(global-display-line-numbers-mode t)=, but no idea why

#+begin_src emacs-lisp
;(global-linum-mode t)
(global-display-line-numbers-mode t)

;; Disable line numbers for org mode
(dolist (mode '(org-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src


** Change all yes/no questions to y/n type
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Save last visited place  of a buffer.
Very convenient when you open the file a later  time.
#+begin_src emacs-lisp
(save-place-mode 1)
#+end_src

** Kill the whole line, rather than leaving the newline behind.
#+begin_src emacs-lisp
(setq  kill-whole-line 'always)
#+end_src

** Highlight current line
#+begin_src emacs-lisp
(global-hl-line-mode t)
#+end_src

** TODO Visual lines
Visual Line mode provides support for editing by visual lines.

It turns on word-wrapping in the current buffer; without word-wrapping,  when word falls at the end of the line, it is just split into two parts to meet the line lenght; with word-wrapping,  words  are not chopped into two parts. Moreover, this mode1 rebinds C-a, C-e, and C-k to commands that operate by visual lines instead of logical lines.
#+begin_src emacs-lisp
(global-visual-line-mode t)
#+end_src

Don't break lines when they become too long. I used this until I discovered visual-fill-column, see below. Since then, I removed this
#+begin_src emacs-lisp
; (setq auto-fill-mode -1)
#+end_src


Visual Fill Column is a small Emacs minor mode that mimics the effect of FillColumn in VisualLineMode. Instead of wrapping lines at the window edge, which is the standard behaviour of visual-line-mode, it wraps lines at fill-column. If fill-column is too large for the window, the text is wrapped at the window edge.

#+begin_src emacs-lisp
(defun efs/text-mode-visual-fill ()
  (setq visual-fill-column-width 150
        visual-fill-column-left-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
   :hook (text-mode . efs/text-mode-visual-fill))
#+end_src


** Disable the default startup screen
I don't care to see the welcome anymore, even though it was very useful 22 years ago when I started to use emacs.
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src

** Start without a default buffer
I don't want to start with any file/buffer in particular.
BTW, setting the default directory to ~ does not work the way I want. Don't set the default-directory to "." because that (seems to) lead to a cycle.
#+begin_src emacs-lisp
(setq initial-buffer-choice  nil)
(setq initial-scratch-message nil)
#+end_src

** Flash
Flash if command makes no sense, like pressing C-g even though it has nothing to do.
#+begin_src emacs-lisp
(setq visible-bell t )
;; ring-bell-function 'ignore       ; no sound
#+end_src

** No lock files, no autosave, no backup files
I hate lock files, auto saved files (I have dropbox)
#+begin_src emacs-lisp
(setq create-lockfiles nil)
(setq auto-save-default nil)
(setq make-backup-files nil)
#+end_src


** Kill without asking
Just kill, do not ask for confirmation
#+begin_src emacs-lisp
(setq confirm-kill-processes nil)
#+end_src
** No double space at end of .

I don't want a double space after a .
#+begin_src emacs-lisp
(setq        sentence-end-double-space 'nil)
#+end_src

** Modify window/frame title

Set filename in the title of the window.
#+begin_src emacs-lisp
(setq frame-title-format (list (format "%s %%S: %%j " (system-name))  '(buffer-file-name "%f" (dired-directory dired-directory "%b")))
)
#+end_src

** Resizing

Since I use i3, I don't care (or very little) about screen lay out. i3 manages all, and does a great job. Thus, resizing frames  a per pixel is not something I do.
#+begin_src emacs-lisp
;(setq frame-resize-pixelwise t)
#+end_src

** Enable conservative scrolling

Let's see whether I find this useful. Normally point moves half way the screen while scrolling. With the setting below one line is added at a time, and  point remains at the bottom (or top when scrolling up).
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** Uniquify
Put a dir-name behind a file name when files have the same name. This comes in handy when editing README.org files, for instance.
#+begin_src emacs-lisp
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+end_src
** TODO Indentation

This line uses setq-default rather than the setq that we have seen before; setq-default sets values only in buffers that do not have their own local values for the variable.
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default standard-indent 4)
  (setq-default electric-indent-inhibit t)
#+END_SRC

What does this do?
#+begin_src emacs-lisp
  (setq backward-delete-char-untabify-method 'nil)
#+end_src

What to do with this: change it so something for python?
  (setq c-basic-offset tab-width)


** TODO Automatic updating of buffers

When exporting an org mode file to LaTeX and pdf, the tex file is modified.
I like to see this (intermediate) tex file automatically updated in emacs.
This is achieved with these settings.

#+begin_src emacs-lisp
(global-auto-revert-mode nil)
#+end_src

Suppress the message that a file has been reverted.
#+begin_src emacs-lisp
(setq auto-revert-verbose nil)
#+end_src

** Clean up at save
I don't want an extra new line at the end, at least not automatically.
#+begin_src emacs-lisp
; (setq require-final-newline t)
(add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src
*
** Middle mouse click pastes at mouse location
#+begin_src emacs-lisp
(setq mouse-yank-at-point t)
#+end_src

** Load newest file
I don't think I need this, so let's comment it out, and see how I fare.
#+begin_src emacs-lisp
; (setq load-prefer-newer t)
#+end_src

** Apropos
A more sophisticated sort of question to ask is, "What are the commands for working with files?"
To ask this question, type C-h a file RET, which displays a list of all command names that contain `file'
#+begin_src emacs-lisp
(setq apropos-do-all t)
#+end_src

** Key bindings

Move to other window, quicker than ~C-x o~.
#+begin_src emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
#+end_src

I use this a lot, for instance  in python mode to autocomplete filenames in ~open("...")~.
#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
#+end_src

Delete rest of the string up to a given character.
#+begin_src emacs-lisp
(global-set-key (kbd "M-z") 'zap-up-to-char)
#+end_src

** Enable prettify symbols mode
#+BEGIN_SRC emacs-lisp
;  (global-prettify-symbols-mode t)
#+END_SRC

* Typing French characters

Allow for French accents
#+begin_src emacs-lisp
(set-language-environment "UTF-8")

(defun accents ()
    (interactive)
    (activate-input-method "latin-1-alt-postfix") )
  ;; (defun current-lang () ;; I don't know whether I need this to be able to type French characters.
  ;;   (interactive)
  ;;   (eval-expression current-language-environment)
  ;;   )

#+end_src

* Kill buffer and its windows
#+begin_src emacs-lisp
(defun bjm/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))

(defun kill-buffer-and-its-windows (buffer)
  "Kill BUFFER and delete its windows.  Default is `current-buffer'.
BUFFER may be either a buffer or its name (a string)."
  (interactive (list (read-buffer "Kill buffer: " (current-buffer) 'existing)))
  (setq buffer  (get-buffer buffer))
  (if (buffer-live-p buffer)            ; Kill live buffer only.
      (let ((wins  (get-buffer-window-list buffer nil t))) ; On all frames.
        (when (and (buffer-modified-p buffer)
                   (fboundp '1on1-flash-ding-minibuffer-frame))
          (1on1-flash-ding-minibuffer-frame t)) ; Defined in `oneonone.el'.
        (when (kill-buffer buffer)      ; Only delete windows if buffer killed.
          (dolist (win  wins)           ; (User might keep buffer if modified.)
            (when (window-live-p win)
              ;; Ignore error, in particular,
              ;; "Attempt to delete the sole visible or iconified frame".
              (condition-case nil (delete-window win) (error nil))))))
    (when (interactive-p)
      (error "Cannot kill buffer.  Not a live buffer: `%s'" buffer))))



; (global-set-key (kbd "C-x k") 'bjm/kill-this-buffer)
(global-set-key (kbd "C-x k") 'kill-buffer-and-its-windows)
; (global-set-key (kbd "C-x w") 'delete-frame)
; (substitute-key-definition 'kill-buffer 'kill-buffer-and-its-windows global-map)
#+end_src

* Auto update

~M-x straight-normalize-all~

# # +begin_src emacs-lisp
# (use-package auto-package-update
#   :custom
#   (auto-package-update-interval 7)
#   (auto-package-update-prompt-before-update t)
#   (auto-package-update-hide-results t)
#   :config
#   (setq auto-package-update-delete-old-versions t)
#   (auto-package-update-maybe)
#   (auto-package-update-at-time "09:00"))
# #+end_src

* Ediff
   by side differences rather than in two buffers under neath each other.
;; otherwise ediff opens another window
#+begin_src emacs-lisp
(use-package ediff
  :commands ediff
  :config (setq ediff-split-window-function
                'split-window-horizontally
                ediff-window-setup-function
                'ediff-setup-windows-plain ) )
#+end_src
* The the

Search for occurrences of repetition of words, like "the the", "a a", and so on

#+begin_src emacs-lisp
(defun the-the ()
       "Search forward for for a duplicated word."
       (interactive)
       (message "Searching for for duplicated words ...")
       (push-mark)
       ;; This regexp is not perfect
       ;; but is fairly good over all:
       (if (re-search-forward
            "\\b\\([^@ \n\t]+\\)[ \n\t]+\\1\\b" nil 'move)
           (message "Found duplicated word.")
         (message "End of buffer")))

     ;; Bind 'the-the' to  C-c \
     (global-set-key "\C-c\\" 'the-the)
#+end_src

* Bufler
Replacement for =ibuffer=. See https://github.com/alphapapa/bufler.el

#+begin_src emacs-lisp
(use-package bufler
  :bind (("C-x C-b" . bufler)))
#+end_src

* Which keys

After typing the beginning of a keychord, like C-c, this package opens, after a second or so, the modeline with an overview of all possible keychords that have that particular combination as a start.
I  find this quite useful.

#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))
#+end_src

* Dired

Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

** Key bindings

*** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

*** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!

*** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

*** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

*** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

*** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs

** Configuration

#+begin_src emacs-lisp

  (use-package dired
    :straight (:type built-in)
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")))

  (use-package dired-single
    :after dired )

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode))

#+end_src



** Kill intermediate buffers

When browsing through the directories, dired keeps open all intermediate buffers.
That used to mess up my buffer list. However, now buffler keeps the buffer list pretty well organized. Perhaps I don't need to kill these buffers anymore.

#+begin_src emacs-lisp
;; (setq delete-by-moving-to-trash t)
;; ; Delete intermediate buffers when navigating through dired.
;; (eval-after-load "dired"
;;  #'(lambda ()
;;      (put 'dired-find-alternate-file 'disabled nil)
;;      (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file)))
#+end_src

* Snippets

Weird, it seems that my ~.emacs.d/snippets~ directory is not added to the path.
However, I then tried to make a new snippet ~M-x yas-new-snippet~ and when saving, emacs asked me where to save the file and it suggested the ~.emacs.d/snippets/org-mode~ dir. Once I saved the file in that directory, it got found after ~(yas-reload-all)~. I infered from this that I have to save the snippets in directories like ~snippets/org-mode~ or ~snipppets/latex-mode~. And this works indeed.

I don't know why I have to call ~yas-reload-all~, but if I don't my own snippets don't get loaded.

#+begin_src emacs-lisp
(use-package yasnippet
  :defer 2
  :config
  (yas-global-mode 1)
)

#+end_src

I added :hook and :mode to try to defer the loading of yasnippet. But all this gives errors. It only seems to work with :defer.

Load the standard snippets of melpa.
#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :after yasnippet)
#+end_src

I don't want a few of the default snippets to interfere with cdlatex.
#+begin_src shell :results none
cd elpa/yasnippet-snippets-*/snippets/latex-mode
rm frame
rm frac
#+end_src

#+RESULTS:

* Prescient and co
#+RESULTS:

#+begin_src emacs-lisp
;(use-package prescient)                 ;
;(use-package selectrum-prescient)
; (straight-use-package 'orderless)
; (straight-use-package 'prescient)
; (straight-use-package 'selectrum)
; (straight-use-package 'selectrum-prescient)
; (straight-use-package 'consult)
; (straight-use-package 'ivy-prescient)
;; (straight-use-package 'company-prescient)
;; (selectrum-mode +1)
;; (selectrum-prescient-mode +1)
;; (prescient-persist-mode +1)

; (global-set-key [C-tab] 'consult-buffer)
#+end_src

(global-set-key (kbd "<f7>") 'consult-outline)
(global-set-key (kbd "C-x C-r") 'consult-recent-file)



* Smex
A convenient interface to recently and most frequently used commands.
- <2021-03-21 zo> I moved to selectrum and prescient for the moment.
- <2021-04-10 za> I moved back to smex and ido, as I find that more convient.


#+begin_src emacs-lisp
(use-package smex
  :bind (("M-x" . smex))
  :config (smex-initialize) )
#+end_src


* ido
DEADLINE: <2021-03-21 zo>

=ido= provides auto completion when finding files and opening buffers.
It also hides lots of files I typically don't want to see when searching for/opening files from a directory.

I don't know why, but if I defer the loading of ido, it does not load well later.
Defering also turns out not to be a good idea, because nearly the first thing I do after opening emacs is search for and open a file.
Hence, I seem to need ido directly anyway.

#+begin_src emacs-lisp
(use-package ido
  :demand t
  ; :commands (ido-find-file)
  :config
  (setq ido-everywhere t
    ido-enable-flex-matching t ;; show any name that has the typed characters
    ido-use-virtual-buffers t  ;; list of past visited files
    ido-create-new-buffer 'always  ;; do not ask to create new buffer when C-x b
    confirm-nonexistent-file-or-buffer nil  ;; also do not ask to confirm in case of C-x b
    ido-default-buffer-method 'selected-window
    ido-file-extensions-order '(".tex" ".py")
    completion-ignored-extensions '(".o" ".pdf" "~" ".bin" ".ilg" ".idx" ".ind" ".log"
                                      ".obj" ".map" ".a" ".so" ".pytxcode" ".toc" ".rel" ".out"
                                      ".mod" ".aux" ".out" ".pyg" ".bbl" ".blg")
    ido-ignore-extensions t  ;; ignore files with the above extensions
    ido-ignore-directories '("auto" "_minted*" "__pycache__" ".git") ;; this works with C-x d, but not with C-x C-f
    ido-ignore-files '("auto" "_minted*" "__pycache__") ;; this works with C-x C-f
    )
  (ido-mode t) )
#+end_src

- I don't think I'll need ivy or helm for my purposes.
- <2021-03-21 zo> For the moment I switch to using prescient and selectrum.
- <2021-04-10 za> I moved back to ido and smex.

* Theming

#+begin_src emacs-lisp
(use-package modus-themes
  :init
  ;; Add all your customizations prior to loading the themes
  (setq modus-themes-slanted-constructs t
        modus-themes-bold-constructs nil)

  ;; Load the theme files before enabling a theme
  (modus-themes-load-themes)
  :config
  ;; Load the theme of your choice:
  ;(modus-themes-load-operandi) ;; OR
  (modus-themes-load-vivendi)
  :bind ("<f5>" . modus-themes-toggle))
#+end_src

I use the following setting for youtube demos.

# +begin_src emacs-lisp
(modus-themes-load-operandi)
(set-face-attribute 'default nil :height 95)
#+end_src


I used the material theme, but I moved to the modus themes of Protesilaos.

# +begin_src emacs-lisp
;; (use-package material-theme
;;   :demand t)
#+end_src

I prefer somehat smaller fonts.
#+begin_src emacs-lisp
(set-face-attribute 'default nil :height 95) ; 95
#+end_src
* Dimmer

This dimms the buffer(s) that don't have point.

#+begin_src emacs-lisp
(use-package dimmer
  :diminish
  :config (dimmer-mode t)
  (setq dimmer-fraction 0.3)
    (setq dimmer-adjustment-mode :foreground)
    (setq dimmer-use-colorspace :rgb) ; cielab)
)
#+end_src

* Parentheses
#+begin_src emacs-lisp
(show-paren-mode 1)

;(use-package rainbow-delimiters
;  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

I don't like rainbow colors; I find it harder to read  code.

* Diminish

suppresses minor modes in the modeline. However, I wonder whether this is necessary when I give the :diminish option in use-package.

#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* Ripgrep, fast searching


I replaced =ack= for =rg=. I include the message to see whether it got loaded or not.

#+begin_src emacs-lisp
(use-package rg
  :commands rg
  :config
  (rg-enable-default-bindings)
  )
#+end_src

* Deft
Deft is a very practical note taking package.

#+begin_src emacs-lisp
(use-package deft
  :bind ("C-c d" . deft)
  :config
  (setq deft-extensions '("txt" "tex" "org"))
  (setq deft-directory "~/org/deft")
  (setq deft-auto-save-interval 0))
#+end_src

* Syntax checking
#+begin_src emacs-lisp
(use-package flycheck
  :defer 1
  :diminish
  :config  (global-flycheck-mode)
)
#+end_src

* Spell checking

I don't want on the fly spell checking, so no flyspell for me. (Sometimes I type a word, and then later I remove it. So, why bother getting the spelling correct right away?)

Telling from the modeline, ispell automatically loads aspell, so I commented that part.

#+begin_src emacs-lisp
(use-package ispell
  :commands ispell-buffer
  :config
  ;; (setq ispell-program-name "aspell"
  ;;    ispell-list-command "--list" ;; this is necessary when using aspell instead of ispell
  ;;   )
  (setcar ispell-tex-skip-alists  ;; skip ij in latex environments.
        (append
         (car ispell-tex-skip-alists)
         '(("[^\\]\\$" . "[^\\]\\$")))))
#+end_src

* Python


I tried =eglot=, but I found it unbearably slow.  I also tried LSP, but it does not work the way I like to see. With =company= and =elpy= I have much better performance.


Ensure to run =pip install jedi flake8=.
Some people say the following is also necessary =pip install importmagic autopep8 yapf=, but I skipped them



#+begin_src emacs-lisp
(use-package elpy
  :diminish
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable))

(use-package blacken
  :diminish
  :after python
  :config
  (setq blacken-skip-string-normalization t
        blacken-line-length 90)
  :hook(python-mode . blacken-mode))
#+end_src

* Autocompletion


# #+begin_src emacs-lisp
# (use-package auto-complete
#   :init
#   (progn
#     (ac-config-default)
#     (global-auto-complete-mode t)
#     ))
# #+end_src

I don't really understand the difference between =auto-complete= and =company=. I have the impression that =company= works better with respect to completion.


Company stands for "complete anything".
#+begin_src emacs-lisp
(use-package company
  :bind (:map company-active-map
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous))
  :config
  (setq company-idle-delay 0.0)
  (global-company-mode t) )

;(use-package company-box
;  :hook (company-mode . company-box-mode))
#+end_src
* Org mode

I commented out =org-structure-template-alist= because I use =yasnippets= rather then =<p TAB= to get a python source code block.

I commented out several header settings for =org-babel= code blocks.
I think I prefer to have these options set per file, not here. I also don't seem to want org-latex-classes as I specify what I want in the files themselves.

#+begin_src emacs-lisp
(use-package org
  :mode ("\\.org\\'" . org-mode)
  :config
  (require 'ox-latex)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (python . t)
     (emacs-lisp . t)))
  ;; (add-to-list 'org-structure-template-alist
  ;;              '("p" . "src python ")
  ;;              )
  (setq org-confirm-babel-evaluate nil
        org-latex-listings 'minted
        org-latex-packages-alist '(("" "minted"))
        org-latex-with-hyperref nil
        org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
        org-src-preserve-indentation t
        org-src-fontify-natively t ; does this work?
        org-list-allow-alphabetical t)
   (setq org-cycle-emulate-tab 'white)
   :hook ((org-mode . turn-on-org-cdlatex)
          (org-mode . org-indent-mode)))
#+end_src


Often I use the (very handy) LaTeX =subfiles=package. The next allows to export (=C-c C-e l l=) to a =\documentclass{subfile}=.
I want to be able to export to a subfiles package.

#+begin_src emacs-lisp
;; (require 'ox-latex)
;; (with-eval-after-load 'ox-latex
;;    (add-to-list 'org-latex-classes
;;    '("subfiles"
;;    "\\documentclass{subfiles}
;;    [NO-DEFAULT-PACKAGES]
;;    [NO-PACKAGES]"
;;    ("\\section{%s}" . "\\section*{%s}")
;;    ("\\subsection{%s}" . "\\subsection*{%s}")
;;    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
;;    ("\\paragraph{%s}" . "\\paragraph*{%s}"))))
#+end_src

** Nice bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :custom
  (org-bullets-bullet-list '("◉" "☯" "○" "☯" "✸" "☯" "✿" "☯" "✜" "☯" "◆" "☯" "▶"))
  (org-ellipsis "⤵")
  :hook (org-mode . org-bullets-mode))
#+end_src

** ob async

ob-async enables asynchronous execution of org-babel src blocks.

#+begin_src emacs-lisp
(use-package ob-async
  :after org-mode)
#+end_src

** htmlize

Code highlighting required for  =nikola=, =reveal.js=, and perhaps more.

#+begin_src emacs-lisp
(use-package htmlize
  :after org-mode)
#+end_src
* Latex

** Paragraph outlining

This function splits a paragraph with one sentence per line.  I find this layout much more convenient than  fixed width paragraphs.

#+begin_src emacs-lisp
  (defun ales/fill-paragraph (&optional P)	;
    "When called with prefix argument call `fill-paragraph'. Otherwise split the current paragraph into one sentence per line."
    (interactive "P")
    (if (not P)
        (save-excursion
          (let ((fill-column 12345678)) ;; relies on dynamic binding
            (fill-paragraph) ;; this will not work correctly if the paragraph is
            ;; longer than 12345678 characters (in which case the
            ;; file must be at least 12MB long. This is unlikely.)
            (let ((end (save-excursion
                         (forward-paragraph 1)
                         (backward-sentence)
                         (point-marker))))  ;; remember where to stop
              (beginning-of-line)
              (while (progn (forward-sentence)
                            (<= (point) (marker-position end)))
                (just-one-space) ;; leaves only one space, point is after it
                (delete-char -1) ;; delete the space
                (newline)        ;; and insert a newline
                (LaTeX-indent-line) ;; I only use this in combination with latex, so this makes sense
                ))))
      ;; otherwise do ordinary fill paragraph
      (fill-paragraph P))
    )
#+end_src

** Search and replace in latex environment
    Usual regular expressions can be used, e.g. searching for \<i\> instead of just i avoids changing \sin to \sxn.

#+begin_src emacs-lisp
(defun latex-replace-in-math ()
  "Call `query-replace-regexp' with `isearch-filter-predicate' set to filter out matches outside LaTeX math environments."
  (interactive)
  (let ((isearch-filter`-predicate
     (lambda (BEG END)
       (save-excursion (save-match-data (goto-char BEG) (texmathp)))))
    (case-fold-search nil))
    (call-interactively 'query-replace-regexp)))
#+end_src

**  Auctex


#+begin_src emacs-lisp
(use-package tex
  :straight auctex
  ; :defer t
  :mode ("\\.tex\\'" . latex-mode)
  :bind (("M-q" . ales/fill-paragraph))  ;; start every sentence on a new line
  :config
  (setq-default auto-fill-function nil) ;;
  ;; (setq-default TeX-master nil ); by each new fie AUCTEX will ask for a master fie.
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq reftex-plug-into-AUCTeX t)
  (setq LaTeX-command-style '(("" "%(PDF)%(latex) -shell-escape %S%(PDFout)")))
  (setq TeX-file-extensions '("tex" "sty"))
  (setq TeX-ispell-extend-skip-list t)
  (setq reftex-isearch-minor-mode t) ; search whole document, not just the current file
  ; (setq LaTeX-electric-left-right-brace t) ; handled by cdlatex, see below
  (add-hook 'LaTeX-mode-hook
            (lambda ()
          (turn-on-reftex)
          (turn-on-cdlatex)
              ; (prettify-symbols-mode) ; handled globally
              ; (visual-line-mode) ; Since I load this globally, it is not necessary I think.
              ; (LaTeX-math-mode) ; enable math-mode right away in  math environment; `a expands right away to \alpha
              (reftex-isearch-minor-mode)
              (LaTeX-add-environments
               '("corollary" LaTeX-env-label)
               '("lemma" LaTeX-env-label)
               '("proposition" LaTeX-env-label)
               '("theorem" LaTeX-env-label)
               '("exercise" LaTeX-env-label)
               '("extra" LaTeX-env-label)
               '("example" LaTeX-env-label)
               '("remark" LaTeX-env-label) ) ) )
  (add-hook 'LaTeX-mode-hook
          '(lambda ()
             (setq ispell-tex-skip-alists
                   (list
                    (append
                     (car ispell-tex-skip-alists)
                     '(("[^\\]\\$" . "[^\\]\\$")))
                    (cadr ispell-tex-skip-alists))) ))
  ;; (add-to-list 'LaTeX-indent-environment-list
  ;;            '("exercise" current-indentation)
  ;;            '("solution" current-indentation) )
  ;(add-to-list 'LaTeX-verbatim-environments "exercise" "solution")
)
#+end_src

questions:
- Why to add exercise and solution to a list?

** CD latex

This gets automatically loaded via the latex hook above.
Perhaps the thing below is necessary to download it in case I update the packages, by deleting ~elpa/~.
So, try to delete the cdlatex package, and see what happens with the lines below commented out.
#+begin_src emacs-lisp
(use-package cdlatex
    :after latex)
#+end_src

Type ~C-c ?~ to get help.
Eg. in a math enviroment type ~fr TAB~ to get a ~\frac~, and ~lr(~ to get a pair of left-right braces. Etc.

** Reftex
#+begin_src emacs-lisp
 (use-package reftex
   ; :defer t
   :after latex
   :config
   (setq reftex-enable-partial-scans t
         reftex-save-parse-info t
         reftex-use-multiple-selection-buffers t
         reftex-plug-into-AUCTeX t
         reftex-cite-prompt-optional-args t; Prompt for empty optional arguments in cite
         )
   (setq reftex-keep-temporary-buffers nil);; added 20210114
   (setq reftex-trust-label-prefix '("fig:" "eq:")) ;; added 20210114
   (setq reftex-label-alist
         '( ("corollary" ?c "cor:" "~\\ref{%s}" nil   ("corollary" "co.") -3)
           ("exercise" ?x "ex:" "~\\ref{%s}" nil   ("exercise" "ex.") -4)
           ("lemma" ?l "lem:" "~\\ref{%s}" nil   ("lemma" "le.") -5)
           ("proposition" ?p "prop:" "~\\ref{%s}" nil   ("proposition" "pr.") -6)
           ("theorem" ?h "thr:" "~\\ref{%s}" nil   ("theorem" "th.") -7)
           ("example" ?p "exa:" "~\\ref{%s}" nil   ("example" "exa.") -8)
           ("remark" ?r "rem:" "~\\ref{%s}" nil   ("remark" "rem.") -9)
           ("definition" ?d "def:" "~\\ref{%s}" nil   ("definition" "def.") -10)
           )
         )
   (setq reftex-external-file-finders
         '(("tex" . "kpsewhich -format=.tex %f")
           ("bib" . "kpsewhich -format=.bbl %f")
           )
         )
   )
 #+end_src
* Reveal.js

Nice to have played with it, but I never use it.
#+begin_src emacs-lisp
;; (use-package ox-reveal
;;   :after org-mode
;;   :config
;;     (require 'ox-reveal)
;;     (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
;;     (setq org-reveal-mathjax t)
;; )
#+end_src

* Jupyter and ipython
I don't use jupyter or ipyton, but org babel.

#+begin_src emacs-lisp
; (use-package jupyter)
; (use-package ob-ipython)
#+end_src

* csv
#+begin_src emacs-lisp
;; (use-package csv-mode
;;   :disabled
;;   :mode ("\\.[Cc][Ss][Vv]\\'" . csv-mode)
;;   :config (setq csv-separators '("," ";" "|" " ")))
#+end_src

* magit

I don't seem to use this.

#+begin_src emacs-lisp
;; (use-package magit
;;   :disabled
;;   :bind (("C-x g" . magit-status))
;;   )
#+end_src

* Atomic chrome
Type emails and boxes within emacs. I never use it though.

https://github.com/imjonathan/atomic-chrome

#+begin_src emacs-lisp
;; (use-package atomic-chrome
;;   :disabled
;;   :commands atomic-chrome-start-server
;;   :config
;;   (atomic-chrome-start-server)
;;   (setq atomic-chrome-buffer-open-style 'frame)
;;   )
#+end_src

Kill frame with =kill-frame= with keychord =C-x 5 0=.

Set a shortcut like =M-e= in chromium by typing =chrome://extensions/shortcuts= in the chrome search bar (on top), and then type =M-e=.

* Final things

Bring the garbage collection back down; at the top of this file we set it to high value to reduce emacs startup time.

#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
