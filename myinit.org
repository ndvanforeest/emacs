#+title: My emacs init file
#+author: Nicky van Foreest
#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent


When you don't know, or forgot, what a function does, put the point on the function name and type =C-h f= to get its documentation; for a variable, type =C-h v=.

* General emacs config


(setq inhibit-startup-screen t
      initial-buffer-choice  nil)

#+begin_src emacs-lisp 
(use-package emacs
  :config
  (setq ;; ring-bell-function 'ignore       ; no sound
        visible-bell t  ;; flash if command makes no sense, like when C-g has nothing to do
        frame-resize-pixelwise t
	;; Setting the default directory to ~ does not work the way I want. 
        ;; default-directory "~/"   ;; don't set it to . because that seems to lead to a cycle
        inhibit-startup-message t
 	;; The lines below do not seem to anything when the startup message is inhibited
	;; initial-startup-screen t
	;; initial-buffer-choice nil
        ;; inhibit-startup-echo-area-message t
        ;; kill-buffer "*scratch*"  ;; This doesn't seem to do anything.
        ;; initial-scratch-message "" ; make scratch message empty
        kill-whole-line 'always  
        load-prefer-newer t ;;   Don't use the compiled code if it's the older package.
        create-lockfiles nil ;; no lockfiles
        auto-save-default nil ;; Do not autosave.
        indent-tabs-mode nil ;;  use spaces for indentation in stead of hard tabs
        ;; tab-width 4 ;;  Let's see how far I get with this quoted
        sentence-end-double-space 'nil ;; no double space at end of sentence
        auto-fill-mode -1  ;; don't insert returns in long lines
        frame-title-format (list (format "%s %%S: %%j " (system-name))
              '(buffer-file-name "%f" (dired-directory dired-directory "%b"))
              )
        require-final-newline t
        apropos-do-all t
        mouse-yank-at-point t;; middle-mouse-click pastes at mouse location
	)

  (menu-bar-mode -1)  ;; I want to use as much screen as possible.
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (horizontal-scroll-bar-mode -1)
  (global-linum-mode t)               ;; enable line numbers globally
  (global-hl-line-mode t)             ;; highlight the line with point
  (global-visual-line-mode t)    
  (column-number-mode t)
  (fset 'yes-or-no-p 'y-or-n-p)       ;; Change all yes/no questions to y/n type
  (save-place-mode 1)                 ;; save last visited place of buffer
  (set-face-attribute 'default nil :height 95) ;; make font slightly smaller

  (set-language-environment "UTF-8") ; Allow for French accents
  (defun accents ()
    (interactive)
    (activate-input-method "latin-1-alt-postfix") )
  ;; (defun current-lang () ;; I don't know whether I need this to be able to type French characters. 
  ;;   (interactive)
  ;;   (eval-expression current-language-environment)
  ;;   )
  :bind (
         ("M-/" . hippie-expand)  ;; useful, at least in python mode to autocomplete filenames in open("..")
         ; ("C-x C-b" . ibuffer) 
         ("M-o" . other-window)  ;; quicker than C-x o
	 ("M-z" . zap-up-to-char)
         )
  :hook (before-save whitespace-cleanup) )


#+end_src

=ibuffer= opens a buffer with a nice overview of all open buffers.

* The the

#+begin_src emacs-lisp 
(defun the-the ()
       "Search forward for for a duplicated word."
       (interactive)
       (message "Searching for for duplicated words ...")
       (push-mark)
       ;; This regexp is not perfect
       ;; but is fairly good over all:
       (if (re-search-forward
            "\\b\\([^@ \n\t]+\\)[ \n\t]+\\1\\b" nil 'move)
           (message "Found duplicated word.")
         (message "End of buffer")))
     
     ;; Bind 'the-the' to  C-c \
     (global-set-key "\C-c\\" 'the-the)
#+end_src

* Bufler

Replacement for =ibuffer=. See https://github.com/alphapapa/bufler.el

#+begin_src emacs-lisp 
(use-package bufler 
  :bind (("C-x C-b" . bufler)))

#+end_src
* Some miscellaneous stuff

When exporting an org mode file to LaTeX and pdf, the tex file is modified.
I like to see this (intermediate) tex file automatically updated in emacs.
This is achieved with these settings.


#+begin_src emacs-lisp 
(global-auto-revert-mode 1) ;; you might not want this
(setq auto-revert-verbose nil) ;; or this
#+end_src

* Which keys

After typing the beginning of a keychord, like C-c, this package opens, after a second or so, the modeline with an overview of all possible keychords that have that particular combination as a start.
I don't know whether I find this useful.

#+begin_src emacs-lisp 
(use-package which-key
  :config
(which-key-mode))
#+end_src

* Uniquify

Put a dir-name behind a file name when files have the same name. 

#+begin_src emacs-lisp 
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)
#+end_src

* Some further general settings

#+begin_src emacs-lisp 
(use-package ediff
  ; side by side differences rather than in two buffers under neath each other.
  :defer t
  :config (setq ediff-split-window-function 'split-window-horizontally
		ediff-window-setup-function 'ediff-setup-windows-plain ;; otherwise ediff opens another window
		)
  )


(setq confirm-kill-processes nil;  "Just kill, do not ask for confirmation
      make-backup-files nil ;; My copies are on dropbox and github
      )

;; a convenient interface to your recently and most frequently used commands.
(use-package smex
  :defer t
  :bind (("M-x" . smex))
  :config (smex-initialize)
)
#+end_src

* dired

When browsing through the directories, I want the intermediate buffers that dired opens killed.

#+begin_src emacs-lisp 
(setq delete-by-moving-to-trash t)
; Delete intermediate buffers when navigating through dired.
(eval-after-load "dired"
 #'(lambda ()
     (put 'dired-find-alternate-file 'disabled nil)
     (define-key dired-mode-map (kbd "RET") #'dired-find-alternate-file)))
#+end_src

* Snippets

#+begin_src emacs-lisp 
(use-package yasnippet
  :config
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
  (yas-global-mode 1))

(use-package yasnippet-snippets)

#+end_src

BTW, after adding or changing a snippet's definition, run:
#+BEGIN_SRC emacs-lisp :tangle no
(yas-reload-all)
#+END_SRC


=cdlatex= may be practical to use in org-mode.
But for the moment (20200719), I use =auctex=, and I'll try =yasnippets=; if this will be not work to my satisfaction, I might perhaps change to =cdlatex=.
In that case, do not forget to switch on the hook when org-mode is loaded. 

* ido

=ido= provides auto completion to find files and open buffers.
It also hides lots of files I typically don't want to see when searching for/opening files from a directory.

#+begin_src emacs-lisp 
(use-package ido
  :config
  (setq ido-everywhere t
	ido-enable-flex-matching t ;; show any name that has the typed characters
	ido-use-virtual-buffers t  ;; list of past visited files
	ido-create-new-buffer 'always  ;; do not ask to create new buffer when C-x b
	confirm-nonexistent-file-or-buffer nil  ;; also do not ask to confirm in case of C-x b
	ido-default-buffer-method 'selected-window
	ido-file-extensions-order '(".tex" ".py")
	completion-ignored-extensions '(".o" ".pdf" "~" ".bin" ".ilg" ".idx" ".ind" ".log"
                                      ".obj" ".map" ".a" ".so" ".pytxcode" ".toc" ".rel" ".out" 
                                      ".mod" ".aux" ".out" ".pyg" ".bbl" ".blg")
	ido-ignore-extensions t  ;; ignore files with the above extensions
	ido-ignore-directories '("auto" "_minted*" "__pycache__" ".git") ;; this works with C-x d, but not with C-x C-f
	ido-ignore-files '("auto" "_minted*" "__pycache__") ;; this works with C-x C-f
	)
  (ido-mode t) )
#+end_src

I don't think I'll need ivy or helm for my purposes.

* Theming

For normal work I use the material theme.

#+begin_src emacs-lisp 
(use-package material-theme
  )

#+end_src

However, for youtube presentations a white background is clearer. For this I use the leuven-theme.
#+begin_src emacs-lisp 
; (use-package leuven-theme  )
#+end_src

#+begin_src emacs-lisp 
(use-package dimmer  ;; This dimms the buffer(s) that don't have point. 
  :config (dimmer-mode t)
  (setq dimmer-fraction 0.2)
  )

(use-package paren   ;; shows matching parentheses in  text
  :init (setq show-paren-delay 0)
  :config (show-paren-mode +1)
  )

(use-package elec-pair  ;; when typing make matching pair of e.g. brackets
  :hook (prog-mode . electric-pair-mode)
  )
#+end_src

* Org mode 

I commented out =org-structure-template-alist= because I use =yasnippets= rather then =<p TAB= to get a python source code block.

I commented out several header settings for =org-babel= code blocks.
I think I prefer to have these options set per file, not here. 

#+begin_src emacs-lisp 
(use-package org
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages  ; I hope I never need any other languages then these
   '((shell . t)
     (ipython . t)
     (python . t)
     (emacs-lisp . t)
     (jupyter . t) ;has to be last in the list
     )
   )
  ;; (add-to-list 'org-structure-template-alist
  ;;              '("p" . "src python ")
  ;;              )
  (setq org-confirm-babel-evaluate nil 
        org-latex-listings 'minted
	org-latex-packages-alist '(("" "minted"))
	org-latex-pdf-process 
	'("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	 "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")
	org-src-preserve-indentation t
	org-src-fontify-natively t ; does this work? 
	org-latex-with-hyperref nil
	org-list-allow-alphabetical t)
  ;; (setq org-babel-default-header-args:python
  ;;     '((:results . "output replace")
  ;; 	(:session . "none")
  ;; 	(:exports . "both")
  ;; 	(:tangle . "no")))
  ;; (setq org-babel-default-header-args:python
  ;;     '((:results . "output replace")
  ;; 	(:session . "none")
  ;; 	(:exports . "both")
  ;; 	(:cache .   "no")
  ;; 	(:noweb . "no")
  ;; 	(:hlines . "no")
  ;; 	(:tangle . "no")
  ;; 	(:eval . "never-export")))
  :hook (org-mode . turn-on-org-cdlatex)
  )

(setq org-cycle-emulate-tab 'white)

;; (add-to-list 'org-latex-classes
;;              '("article"
;;                "\\documentclass{article}"
;;                ("\\section{%s}" . "\\section*{%s}")
;;                ("\\subsection{%s}" . "\\subsection*{%s}")
;;                ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
;;                ("\\paragraph{%s}" . "\\paragraph*{%s}")
;;                ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

#+end_src




Often I use the (very handy) LaTeX =subfiles=package. The next allows to export (=C-c C-e l l=) to a =\documentclass{subfile}=.
I want to be able to export to a subfiles package.

#+begin_src emacs-lisp 
(require 'ox-latex)
(with-eval-after-load 'ox-latex
   (add-to-list 'org-latex-classes
   '("subfiles"
   "\\documentclass{subfiles}
   [NO-DEFAULT-PACKAGES]
   [NO-PACKAGES]"
   ("\\section{%s}" . "\\section*{%s}")
   ("\\subsection{%s}" . "\\subsection*{%s}")
   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
   ("\\paragraph{%s}" . "\\paragraph*{%s}"))))
#+end_src

Make nice bullets when viewing =.org= files
#+begin_src emacs-lisp 
(use-package org-bullets
  ; :config
  ; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  :hook(org-mode . org-bullets-mode) )
#+end_src

#+begin_src emacs-lisp 
(use-package ob-async)

#+end_src

* Reveal.js

#+begin_src emacs-lisp 
(use-package ox-reveal
  :config
    (require 'ox-reveal)
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)
)
#+end_src

* Diminish

#+begin_src emacs-lisp 
(use-package diminish 
  )
#+end_src

Seems to suppress minor modes in the modeline, but I guess I don't to see the effect of it.

* ripgrep, fast searching

I replaced =ack= for =rg=

#+begin_src emacs-lisp 
(use-package rg
  :config
  (rg-enable-default-bindings)
  )
#+end_src

* Deft: Taking notes

#+begin_src emacs-lisp 
(use-package deft  ;; very practical note taking package
  :defer t
  :bind ("C-c d" . deft)
  :config
  (setq deft-extensions '("txt" "tex" "org"))
  (setq deft-directory "~/org/deft")
  (setq deft-auto-save-interval 0)
  )
#+end_src

* Atomic chrome
Type emails and boxes within emacs

https://github.com/imjonathan/atomic-chrome

#+begin_src emacs-lisp 
(use-package atomic-chrome
  :config
  (atomic-chrome-start-server)
  (setq atomic-chrome-buffer-open-style 'frame)
  )
#+end_src

Kill frame with =kill-frame= with keychord =C-x 5 0=.

Set a shortcut like =M-e= in chromium by typing =chrome://extensions/shortcuts= in the chrome search bar (on top), and then type =M-e=.

* Syntax checking


#+begin_src emacs-lisp 
(use-package flycheck
  :init (global-flycheck-mode) )
#+end_src

* Spell checking

#+begin_src emacs-lisp 
(use-package flyspell
  :init  (flyspell-mode 1)
  :config
  ;;   (setq 
  (setq ispell-program-name "aspell"
	ispell-list-command "--list" ;; this is necessary when using aspell instead of ispell
	;; ispell-dictionary   "english" ; Default dictionary to use
	)
  :hook((prog-mode . flyspell-mode)
        (text-mode . flyspell-mode)
        )
  )
#+end_src

* Autocompletion

# #+begin_src emacs-lisp 
# (use-package auto-complete
#   :init
#   (progn
#     (ac-config-default)
#     (global-auto-complete-mode t)
#     ))
# #+end_src

I don't really understand the difference between =auto-complete= and =company=. I have the impression that =company= works better with respect to completion. 


Company stands for "complete anything". 
#+begin_src emacs-lisp 
(use-package company
  :bind (:map company-active-map
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous)
              )
  :config
  (setq company-idle-delay 0.0)
  (global-company-mode t)
  )
#+end_src

* Python things


I tried =eglot=, but I found it unbearably slow.  With =company= and =elpy= I have much better performance. 




Ensure to run =pip install jedi flake8=.
Some people say the following is also necessary =pip install importmagic autopep8 yapf=, but I skipped them
# #+begin_src emacs-lisp 
# (use-package lsp-mode
#   :config
#   (setq lsp-highlight-symbol-at-point nil)
#   (lsp-register-custom-settings
#    '(("pyls.plugins.pyls_black.enabled" t t)))
#   :hook (python-mode . lsp))

# (use-package lsp-ui
#   :commands lsp-ui-mode)
# #+end_src


#+begin_src emacs-lisp 
(use-package elpy
  :after python
  :custom (elpy-rpc-backend "jedi")
  :config
  (remove-hook 'elpy-modules 'elpy-module-flymake)
  (elpy-enable)
  )

(use-package blacken
  :demand t
  :after python
  :config
  (setq blacken-skip-string-normalization t
        blacken-line-length 90
        )
  :hook(python-mode . blacken-mode)   ;; autoformat with black on save
  )
#+end_src


Since I load elpy I don't think it is necessary to explicitly load =jedi=.


#+begin_src emacs-lisp 
(setq python-indent-guess-indent-offset t)  
(setq python-indent-guess-indent-offset-verbose nil)
#+end_src

* Jupyter and ipython
I don't know whether this is practical.

#+begin_src emacs-lisp 
; (use-package jupyter)
; (use-package ob-ipython)

#+end_src

* Latex

*** TODO I found this is in the manual of cdlatex. There seems to be a difference between LaTeX mode and latex mode. I have to sort this out.

(add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX mode
(add-hook 'latex-mode-hook 'turn-on-cdlatex)   ; with Emacs latex mode


#+begin_src emacs-lisp 
(use-package latex; tex-site ;; If I don't use latex here, the add-to-list below does not work
  :ensure auctex
  :defer t
  :mode ("\\.tex\\'" . TeX-latex-mode)
  :init
  (setq reftex-plug-into-AUCTeX t )
  :bind (("M-q" . ales/fill-paragraph))  ;; start every sentence on a new line
  :config
  ;; (setq-default TeX-master nil ); by each new fie AUCTEX will ask for a master fie.
  (setq-default auto-fill-function nil) ;; 
  (setq TeX-auto-save t
        TeX-parse-self t
        TeX-save-query nil  ;dont ask to save if you want to compile with C-c C-c
        LaTeX-command-style '(("" "%(PDF)%(latex) -shell-escape %S%(PDFout)"))
        TeX-file-extensions '("tex" "sty")
        TeX-ispell-extend-skip-list t
	reftex-isearch-minor-mode t ; search whole document, not just the current file
        )
  (defun ales/fill-paragraph (&optional P)
    "When called with prefix argument call `fill-paragraph'. Otherwise split the current paragraph into one sentence per line."
    (interactive "P")
    (if (not P)
        (save-excursion
          (let ((fill-column 12345678)) ;; relies on dynamic binding
            (fill-paragraph) ;; this will not work correctly if the paragraph is
            ;; longer than 12345678 characters (in which case the
            ;; file must be at least 12MB long. This is unlikely.)
            (let ((end (save-excursion
                         (forward-paragraph 1)
                         (backward-sentence)
                         (point-marker))))  ;; remember where to stop
              (beginning-of-line)
              (while (progn (forward-sentence)
                            (<= (point) (marker-position end)))
                (just-one-space) ;; leaves only one space, point is after it
                (delete-char -1) ;; delete the space
                (newline)        ;; and insert a newline
                (LaTeX-indent-line) ;; I only use this in combination with late, so this makes sense
                ))))
      ;; otherwise do ordinary fill paragraph
      (fill-paragraph P))
    )
  (add-hook 'LaTeX-mode-hook
            (lambda ()
	    (turn-on-reftex)
	    (turn-on-cdlatex) 
              ; (visual-line-mode) ; Since I load this globally, it is not necessary I think. 
              ; (LaTeX-math-mode) ; enable math-mode right away in  math environment; `a expands right away to \alpha
  	      (electric-indent-local-mode -1) ; this does not seem to help to no indent in an environment.
              (LaTeX-add-environments
               '("axiom" LaTeX-env-label)
               '("corollary" LaTeX-env-label)
               '("lemma" LaTeX-env-label)
               '("proposition" LaTeX-env-label)
               '("theorem" LaTeX-env-label)
               '("exercise" LaTeX-env-label)
               '("extra" LaTeX-env-label)
               '("example" LaTeX-env-label)
               '("remark" LaTeX-env-label)
               ;; '("question" "point")
               ;;'("questionText" "point")
               '("slide" "title")
               '("wideslide" "title")
               )
              )
            )
  (add-to-list 'LaTeX-verbatim-environments "exercise" "solution")
  ;; (add-to-list 'LaTeX-indent-environment-list
  ;; 	       '("exercise" current-indentation)
  ;;              '("solution" current-indentation)
  ;; 	       )
  )


(use-package reftex
  :defer t
  :config
  (setq reftex-enable-partial-scans t
        reftex-save-parse-info t
        reftex-use-multiple-selection-buffers t
        reftex-plug-into-AUCTeX t
        reftex-cite-prompt-optional-args t; Prompt for empty optional arguments in cite
        )
  (setq reftex-label-alist
        '(("axiom"   ?a "ax:"  "~\\ref{%s}" nil ("axiom"   "ax.") -2)
          ("corollary" ?c "cor:" "~\\ref{%s}" nil   ("corollary" "co.") -3)
          ("exercise" ?x "ex:" "~\\ref{%s}" nil   ("exercise" "ex.") -4)
          ("extra" ?x "ex:" "~\\ref{%s}" nil   ("exercise" "ex.") -4)
          ("lemma" ?l "lem:" "~\\ref{%s}" nil   ("lemma" "le.") -5)
          ("proposition" ?p "prop:" "~\\ref{%s}" nil   ("proposition" "pr.") -6)
          ("theorem" ?h "thr:" "~\\ref{%s}" nil   ("theorem" "th.") -7)
          ("example" ?p "exa:" "~\\ref{%s}" nil   ("example" "exa.") -8)
          ("remark" ?r "rem:" "~\\ref{%s}" nil   ("remark" "rem.") -9)
          ("definition" ?d "def:" "~\\ref{%s}" nil   ("definition" "def.") -10)
          )
        )
  (setq reftex-external-file-finders
        '(("tex" . "kpsewhich -format=.tex %f")
          ("bib" . "kpsewhich -format=.bbl %f")
          )
        )
  )

(use-package cdlatex)

#+end_src

** Search and replace in latex environment
    Usual regular expressions can be used, e.g. searching for \<i\> instead of just i avoids changing \sin to \sxn.

#+begin_src emacs-lisp 
(defun latex-replace-in-math ()
  "Call `query-replace-regexp' with `isearch-filter-predicate' set to filter out matches outside LaTeX math environments."
  (interactive)
  (let ((isearch-filter`-predicate
	 (lambda (BEG END)
	   (save-excursion (save-match-data (goto-char BEG) (texmathp)))))
	(case-fold-search nil))
    (call-interactively 'query-replace-regexp)))
#+end_src

* csv
#+begin_src emacs-lisp 
(use-package csv-mode
  :defer t
  :mode ("\\.[Cc][Ss][Vv]\\'" . csv-mode)
  :config (setq csv-separators '("," ";" "|" " ")))
#+end_src

* github

#+begin_src emacs-lisp 
(use-package magit
  :defer t
  :bind (("C-x g" . magit-status))
  )
#+end_src

* htmlize

Code highlighting, for  =nikola=, =reveal.js=, and perhaps more.

#+begin_src emacs-lisp 
(use-package htmlize)
#+end_src

